// 1
// было - определяем наибольшую не-увеличивающуюся последовательность с конца массива
# identify the longest suffix that is non-increasing
for ind in range(n - 1, 0, -1):
	right = input_list[ind]
	left = input_list[ind - 1]

// стало - используем стэк для решения
from collections import deque

stack = deque()
for i in input_list:
	stack.append(i)
	
right = stack.pop()
for i in range(n):
	left = stack.pop()
	if left < right:
		...
	right = left
	
	
// 2
// было - задача по добавлению кортежей из пар значений в листе
captured_cells = []
for i in range(0, battalion_size, 2):
	captured_cells.add((battalion[i], battalion[i + 1]))

// стало - можно также решить очередью, чтобы не обращаться к battalion по индексу
from collections import deque

queue = deque()
for i in battalion:
	queue.append(i)
	
while queue:
	captured_cells.add(
		(queue.popleft(), queue.popleft())
	)


// 3
// было - нахождения шаблона текста (до определенного символа)
// при помощи массива и среза

# calculate template
counter = 1
while counter < len(line):
    if line[counter] == TEMPLATE_SYMBOL:
        break
    counter += 1

template = line[:counter]

// стало - используем очередь, чтобы заполнить шаблон
from collections import deque

queue = deque()
for i in line:
	queue.append(i)
	
template = ''
char = None
while char != TEMPLATE_SYMBOL:
	template += queue.popleft()
	
	
// 4
// было - обращение по индексу используется,
// чтобы развернуть вторую половину массива в обратом порядке

mid = N // 2
# reverse the second part of the list
# mid + (mid // 2 + 1) need to swap only from 1/2 to 3/4 part
for counter, ind in enumerate(range(mid, mid + (mid // 2 + 1))):
    Tele[ind], Tele[N - counter] = Tele[N - counter], Tele[ind]

return Tele

// стало - использовать двустороннюю очередь, чтобы проделать то же самое
from collections import deque

tele_deque = deque()
for i in Tele:
	deque.append(i)
	
mid = N // 2
result = []
counter = 0

# adding first part of array
while counter <= mid:
	result.append(tele_deque.popleft())
	counter += 1
	
# adding reversed second part of array
while tele_deque:
	result.append(tele_deque.pop())
	
	
// 5
// было - задача odometer, произвольный доступ используется, чтобы из массива
// выделить значение времени на часах и текущую скорость

def odometer(oksana: list[int]) -> int:
    distance = 0
    time_start = 0
    points = len(oksana) - 1

    for i in range(0, points, 2):
        time_delta = oksana[i + 1] - time_start
        time_start = oksana[i + 1]
        distance += oksana[i] * time_delta

    return distance
	
// стало - можно использовать очередь, чтобы избежать произвольного доступа
from collections import deque

def odometer(oksana: list[int]) -> int:
	queue = deque()
	for i in oksana:
		queue.append(i)
		
    distance = 0
	time_start = 0
    points = len(oksana) - 1

    for i in range(0, points, 2):
		current_time = queue.popleft()
        time_delta = current_time - time_start
        time_start = current_time
		speed = queue.popleft()
		distance += speed * time_delta

    return distance
